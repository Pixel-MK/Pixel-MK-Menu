buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.parchmentmc.org' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'net.darkhax.curseforgegradle', name: 'CurseForgeGradle', version: '1.0.10'
        classpath group: "net.galacticraft.publish.curseforge", name: 'curseforge', version: '1.0.0'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

version = "${project.version}.${buildNumber}".toString()
group = "io.github.apolo49.pixelmk"

apply plugin: 'maven-publish'
apply from: 'gradle/java.gradle'
apply from: 'gradle/signing.gradle'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "net.galacticraft.publish.curseforge"

archivesBaseName = "pixelmkmenu-${minecraft_version}"

minecraft {
    // mappings channel: 'official', version: '1.18.2'
    mappings channel: 'parchment', version: '2022.09.04-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'pixelmkmenu'
            mods {
                pixelmkmenu {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'pixelmkmenu'
            mods {
                pixelmkmenu {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'pixelmkmenu'
            mods {
                pixelmkmenu {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'pixelmkmenu', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                pixelmkmenu {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
    implementation fg.deobf("curse.maven:create-328085:4007544-sources")
    implementation fg.deobf("curse.maven:quark-243121:3840125-sources")

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {

    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {

        expand buildProps
    }

    // Replaces FML's magic file.jarVersion string with the correct version at
    // build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {

        expand buildProps
    }
}

jar.finalizedBy('reobfJar')

// -- MAVEN PUBLISHING --
publishing {

    publications {

        mavenJava(MavenPublication) {
            pom {
                name = 'Pixel MK Menu'
                description = 'Minecraft mod to transform GUIs'
                url = "https://github.com/apolo49/Pixel-MK-Menu/"
                packaging = 'jar'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'apolo49'
                        name = 'Joe Targett'
                        email = 'joe.targett@outlook.com'
                        organization = "Pixel MK"
                        organizationUrl = "https://github.com/apolo49"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/apolo49/Pixel-MK-Menu.git'
                    developerConnection = 'scm:git:ssh://github.com:apolo49/Pixel-MK-Menu.git'
                    url = 'https://github.com/apolo49/Pixel-MK-Menu/tree/1.18.2'
                }
            }

            groupId = project.group
            artifactId project.archivesBaseName
            version version

            // Base mod archive.
            artifact jar

            // Adds the sources as an artifact.
            artifact project.sourcesJar {
                classifier 'sources'
            }

            // Adds the javadocs as an artifact.
            artifact project.javadocJar {
                classifier 'javadoc'
            }
        }
    }

    repositories {

        maven {
            name "MavenCentral"

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        }

        maven {
            name "McModsRepo"
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Forge's Jar Signer
def canSignJar = project.hasProperty('keyStore') && project.hasProperty('keyStorePass') && project.hasProperty('keyStoreKeyPass') && project.hasProperty('keyStoreAlias')

task signJar(type: net.minecraftforge.gradle.common.tasks.SignJar, dependsOn: jar) {

    onlyIf {

        canSignJar
    }

    if (canSignJar) {

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath

        build.dependsOn signJar
    }

    else {

        project.logger.warn('Jar signing is disabled for this build. One or more keyStore properties are not specified.')
    }
}

    curseforge {
	    // debug()
	    file(jar) // or file(customJar, 'CustomName')
	    projectId('682844')// or projectId(123456)
	    releaseType('release')
	    gameVersions('1.18.2')
	    changelog('changlogs/CHANGELOG.md')
	    changelogType('text')
	    dependencies {
		    optional('quark')
            optional('create')
	    }
    }

publishToCurseforge.dependsOn publish