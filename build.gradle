buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.ajoberstar:grgit:2.2.1"
    }
}
        
apply plugin: "net.minecraftforge.gradle.forge" // adds the forge dependency
apply plugin: "eclipse"
apply plugin: 'maven' // for uploading to a maven repo
apply plugin: 'maven-publish' // for uploading to a maven repo

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = "com.pixelmkmenu.pixelmkmenu"
archivesBaseName = 'Pixel-MK-Menu'

ext.mcModInfo = new groovy.json.JsonSlurper().parse(file("src/main/resources/mcmod.info"))

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

	version = config.mc_version + "-" + config.forge_version
    runDir = "run"

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    mappings = config.mappings_version
    
	
	//makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	if(!Boolean.getBoolean("release")){
		project.version += "-SNAPSHOT"
	}
	
	replace "\$version", project.version
    replace "\${mcversion}", version
    // Replace @Mod.acceptedMinecraftVersions specially as it has to be a valid version in a dev environment :/
    replace "(gradle_replace_mcversion,)", "[" + version + "]"
    replace "(gradle_replace_forgeversion,)", "[" + config.forge_version + ",)"	
	
}

// configure  the source folders
sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
}

// Obfuscated Jar location
ext.jarFile = zipTree(jar.archivePath)

// Add API dir to the IDEA module
idea.module.sourceDirs += sourceSets.api.java.srcDirs

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        // ${version}   and    ${mcversion}    are the exact strings being replaced
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'pack.mcmeta'
        exclude 'pack.png'
    }
}

def createMCModInfo(String taskName)
{
    return new File("$projectDir/build/processing/" + taskName + "/mcmod.info")
}

def writeMCModInfo(String taskName, int... ids)
{
    File temp = createMCModInfo(taskName)
    temp.parentFile.mkdirs()
    if (temp.exists())
        temp.delete()
    temp.createNewFile()
    def elements = []
    for (int id : ids) {
        elements += ext.mcModInfo[id];
    }
    String prettyPrinted = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(elements))
    prettyPrinted = prettyPrinted.replace("\$version", project.version)
    prettyPrinted = prettyPrinted.replace("\${mcversion}", project.minecraft.version)
    temp.write(prettyPrinted)
    return temp
}

def parseConfig(File config) {
    if (!config.exists())
        return null
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

def unzippedSourceJar = new File("$projectDir/build/processing/tasks/unzipped_src_jar/unzip")
def libsDir = new File(System.getenv("LIBS_DIR") ?: "$projectDir/build/libs/", version)
def modulesDir = new File(libsDir, "modules")
def modulesDirSrc = new File(modulesDir, "src")

task unzipSourceJar(type: Copy, dependsOn: sourceJar) {
    from (zipTree(sourceJar.archivePath)) {
        include "**"
    }
    into unzippedSourceJar
}

task deobfJar(type: Jar) {
    destinationDir = libsDir
    appendix = "main"
    from sourceSets.main.output
    classifier = 'dev'
}

task mainJar(type: Jar, dependsOn:reobfJar) {
    destinationDir = libsDir
    appendix = "main"

    from(project.ext.jarFile) {
        includes.addAll("**")
    }
}

task mainSrcJar(type: Jar, dependsOn:[reobfJar, unzipSourceJar]) {
    destinationDir = libsDir
    appendix = "main"
    classifier = "sources"

    from (unzippedSourceJar) {
        includes.add("**")
    }
}

build.dependsOn mainSrcJar, deobfJar

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    // minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
