plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'checkstyle'
    id 'pmd'
    id 'signing'
    id 'net.ltgt.errorprone' version '4.+'
    id 'net.ltgt.nullaway' version '2.+'
    id "com.github.spotbugs" version "6.+"
    id "com.diffplug.spotless" version "7.+"
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

def javaLicenseHeader = '''/*
* Copyright 2024 Joe Targett, Pixel MK Group
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
* associated documentation files (the “Software”), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute,
* sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or
* substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
* NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

'''

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

nullaway {
    annotatedPackages = ["io.github.pixelmk.pixelmkmenu"]
}

checkstyle {
    toolVersion = "10.17.0"
}

spotbugs {
    toolVersion = '4.+'
    maxHeapSize = '2G'
    onlyAnalyze = ['io.github.pixelmk.pixelmkmenu.*']
}

pmd {
    toolVersion = '7.+'
    ignoreFailures = false
}

spotless {

  format 'misc', {
    // define the files to apply `misc` to
    target '.gitattributes', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }

  java {
    // don't need to set target, it is inferred from java

    // apply a specific flavor of google-java-format
    googleJavaFormat('1.22.0')
    // fix formatting of type annotations
    formatAnnotations()
    // make sure every file has the following copyright header.
    // optionally, Spotless can set copyright years by digging
    // through git history (see "license" section below)
    licenseHeader javaLicenseHeader

    target project.fileTree(project.projectDir) {
        include 'src/main/java/**'
    }
  }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()
java.withJavadocJar()

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // NullAway
    errorprone "com.uber.nullaway:nullaway:0.+"

    // ErrorProne
    errorprone "com.google.errorprone:error_prone_core:2.+"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Pixel MK Menu'
                description = 'Minecraft mod to transform GUIs'
                url = "https://github.com/Pixel-MK/Pixel-MK-Menu/"
                packaging = 'jar'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'apolo49'
                        name = 'Joe Targett'
                        email = 'joe.targett@outlook.com'
                        organization = "Pixel MK"
                        organizationUrl = "https://github.com/Pixel-MK"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Pixel-MK/Pixel-MK-Menu.git'
                    developerConnection = 'scm:git:ssh://github.com:Pixel-MK/Pixel-MK-Menu.git'
                    url = 'https://github.com/Pixel-MK/Pixel-MK-Menu/tree/1.20.6'
                }
            }
            groupId = project.group
            artifactId project.archivesBaseName
            version version
        }
    }
    repositories {
        // maven {
        //     name "MavenCentral"

        //     // Sets maven credentials if they are provided. This is generally
        //     // only used for external/remote uploads.
        //     if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

        //         credentials {

        //             username findProperty('mavenUsername')
        //             password findProperty('mavenPassword')
        //         }
        //     }

        //     url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        // }
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

jar {
    manifest {
        attributes( [
        'Specification-Title'     : findProperty("mod_name"),
        'Specification-Vendor'    : 'pixelmk',
        'Specification-Version'   : project.jar.archiveVersion,
        'Implementation-Title'    : findProperty("mod_id"),
        'Implementation-Version'  : project.jar.archiveVersion,
        'Implementation-Vendor'   : 'pixelmk',
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        'Timestampe'              : System.currentTimeMillis(),
        'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        'Build-On-Minecraft'      : minecraft_version
    ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = findProperty('CURSE_TOKEN')

    // A project ID is required to tell CurseForge which project the uploaded
    // file belongs to. This is public on your project page and is not private
    // information.
    def projectId = 682844

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    def mainFile = upload(projectId, jar)
    mainFile.changelog = findProperty('changelog')
    mainFile.releaseType = findProperty('mod_release_type')
    mainFile.changelogType = 'markdown'
    mainFile.addModLoader('neoforge')

    mainFile.addGameVersion(findProperty('minecraft_version'))


    // Add sources Jar to upload
    mainFile.withAdditionalFile(sourcesJar)

    // Add JavaDoc Jar to upload
    mainFile.withAdditionalFile(javadocJar)
    debugMode = true
}

modrinth {
    token = findProperty('MODRINTH_TOKEN')
    projectId = "a2TIbRUs"
    versionNumber = findProperty('mod_version')
    versionType = findProperty('mod_release_type')
    uploadFile = jar
    gameVersions = [findProperty('minecraft_version')]
    loaders = ["neoforge"]
    additionalFiles = [sourcesJar, javadocJar]
    changelog = findProperty('changelog')
    debugMode = true
}

publish.dependsOn tasks.modrinth
publish.dependsOn publishCurseForge